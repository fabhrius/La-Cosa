Capitulo 2
estados de un proceso
Veamos otra vez la suma de un listado de numeros, que hemos utilizado de ejemplo en el capitulo anterior.
Inicialmente la lista contiene 5 numeros, y esa es toda la informacion que tenemos del problema hasta ese momento. Llamaremos al conjunto de datos, "contexto" del problema.
Hemos encontrado la solucion despues de realizar 4 operaciones de suma entre 2 numeros. Han sido 4 pasos.


Observad que, en cada paso, despues de cada suma, el conjunto de datos ha cambiado.
Cada vez que realizamos una operacion sobre los datos, el contexto cambia de estado.
Y entre los posibles estados de un proceso, distinguiremos 
- un “estado incial”,
- un “estado final”, y
- un conjunto de “estados intermedios”.

Iniciamos la suma con el listado de numeros que queremos sumar, este es el “estado inicial”.
El objetivo es obtener el resultado total de la suma de todos los numeros de la lista, ese es el “estado final”.

--------------------------

States of a Process

Let's review again the sum of a list of numbers that we used as an example in the previous chapter.
Initially, the list contains 5 numbers, and that is all the information we have about the problem at that time. We will call the set of data the "context" of the problem.
We have found the solution after performing 4 addition operations between 2 numbers. There have been 4 steps.

Note that, at each step, after each sum, the set of data has changed.
Every time we perform an operation on the data, the context changes state.
And among the possible states of a process, we will distinguish:

    an "initial state",
    a "final state", and
    a set of "intermediate states".

We start the sum with the list of numbers we want to add, this is the "initial state".
The goal is to obtain the total result of the sum of all the numbers in the list, which is the "final state".

---------------------------------


En el caso de una partida de ajedrez.
El “estado incial” sera cuando las fichas estan colocadas en la posicion de salida, antes de que se haya realizado ningun movimiento.
El “estado final” sera cuando se ha dado jaque-mate, la partida termina, este es el estado al que queremos llegar. Y entre el estado inicial y el estado final, la partida cambiara de estado cada vez que un jugador realice un movimiento, estos seran los “estados intermedios”.

Imaginemos ahora que en mitad de una partida de ajedrez, quisieramos dejar el juego por hoy, para continuar manyana desde el mismo punto en que lo hemos dejado.
Para poder continuar manyana desde el mismo punto, sera necesario recordar el estado en que la partida habia quedado.
Para recordar el estado del juego podriamos escribir en un listado la posicion de las fichas sobre el tablero, asi podriamos reconstruir la partida para continuar desde el mismo punto.
En este caso, la informacion del estado sera la posicion de las fichas, y este es el conjunto de datos que definen el contexto en este caso.
Utilizaremos la idea de estados del proceso para resolver el problema, buscando un camino que nos lleve desde el estado inicial hasta el estado final a traves de estados intermedios.
Podrian existir un gran numero de estados posibles, pero queremos saber cuales de todos los posibles, son los que forman el camino que va desde el estado incial hasta el estado final.
El juego de ajedrez es de gran complejidad, y si quisieramos generar todos los estados posibles, nos encontrariamos con un elevado numero de estados diferentes. Algo asi como 10 elevado a 120.
Para verlo graficamente utilizaremos un ejemplo mas simple.
Tic-Tac-Toe ( 3 en linea)

El dibujo muestra en el juego de 3 en linea, el camino a traves de distintos estados que va desde el estado inicial hasta uno de los posibles estados finales.

-----------------------------------------


In the case of a game of chess,
The "initial state" is when the pieces are placed in the starting position before any moves have been made.
The "final state" is when checkmate has been given, the game ends, and this is the state we want to reach. And between the initial state and the final state, the game will change state each time a player makes a move, these will be the "intermediate states".

Now, imagine that in the middle of a game of chess, we wanted to stop playing for today, and continue tomorrow from the same point where we left off.
To be able to continue tomorrow from the same point, it will be necessary to remember the state in which the game was left.
To remember the state of the game, we could write down on a list the position of the pieces on the board, so we could reconstruct the game to continue from the same point.
In this case, the information of the state will be the position of the pieces, and this is the set of data that defines the context in this case.
We will use the idea of states of the process to solve the problem, looking for a path that takes us from the initial state to the final state through intermediate states.
There could be a large number of possible states, but we want to know which of all the possible ones form the path that goes from the initial state to the final state.
The game of chess is of great complexity, and if we wanted to generate all possible states, we would find ourselves with a high number of different states, something like 10 to the power of 120.
To visualize it graphically, let's use a simpler example.
Tic-Tac-Toe (3 in a row)

The drawing shows in the game of 3 in a row, the path through different states that goes from the initial state to one of the possible final states.


----------------------------------


Para resolver problemas, utilizaremos el concepto de "estados", junto con una estructura llamada
 "Grafo".
En matemáticas y ciencias de la computación, un "grafo" es una estructura abstracta que representa relaciones entre objetos. 
Un grafo consiste en un conjunto de nodos y un conjunto de aristas que conectan pares de nodos.


(grafico grafo)

Los grafos se utilizan de muchas formas diferentes para el analisis de muchos tipos de problemas diferentes, pero nosotros construiremos un grafo del siguiente modo.
Dentro de los nodos, colocaremos un estado del proceso, y las aristas que unen los nodos nos mostraran la relacion entre padres e hijos.
Veamos por ejemplo, como iniciariamos la construccion de un grafo con los estados del juego de 3 en linea.
Empezaremos poniendo el estado incial dentro de un nodo.
Los hijos del estado inicial mostraran todas las jugadas posibles, en este caso el tablero esta vacio y puede colocarse una ficha en cualquier casilla, y por lo tanto existen 9 jugadas posibles, crearemos los 9 hijos del estado inicial y los uniremos al padre con aristas.



A partir de estos nuevos estados tambien pueden realizarse jugadas validas, en todos estos tableros existen 8 casillas vacias y podemos colocar una ficha en cualquiera de ellas, generaremos todos los hijos de estos estados, los pondremos dentro de un nuevo nodo y uniremos el padre con el hijo a traves de una arista.
Lo mostrare para uno solo de los hijos.




El grafo empieza a transformarse en una gran red de nodos y aristas. Si continuamos con este proceso de generar hijos por cada jugada valida desde cada nodo, la red final sera grande y compleja.
En el caso de este juego existen 
9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 = 362.880 estados posibles.
es decir que el grafo tendra 362.880 nodos.
Una vez generados todos los posibles estados podremos ver entre ellos cuales son los estados finales, y podremos ver el camino entre estados que llevan desde el estado inicial hasta un estado final.
Como en el ejemplo anterior.



En resumen,  hemos comentado 
a que llamamos estados de un proceso, 
que cosa es un grafo, y 
como es posible encontrar, entre todos los posibles, los "caminos" que nos llevan a la solucion de un problema.
Con estas ideas, estamos ya preparados para iniciar el experimento.



--------------------------------------------


To solve problems, we will use the concept of "states", along with a structure called a "graph". In mathematics and computer science, a "graph" is an abstract structure that represents relationships between objects. A graph consists of a set of nodes and a set of edges that connect pairs of nodes.

(graphic of a graph)

Graphs are used in many different ways for the analysis of many different types of problems, but we will construct a graph in the following way. Within the nodes, we will place a state of the process, and the edges that connect the nodes will show us the relationship between parents and children.

For example, let's see how we would start building a graph with the states of a Tic-Tac-Toe game. We will start by placing the initial state within a node. The children of the initial state will show all possible moves. In this case, the board is empty and a token can be placed in any square, so there are nine possible moves. We will create the nine children of the initial state and connect them to the parent with edges.

From these new states, valid moves can also be made. In all of these boards, there are eight empty squares and a token can be placed in any of them. We will generate all the children of these states, place them within a new node, and connect the parent to the child through an edge. I will show it for just one of the children.

The graph begins to transform into a large network of nodes and edges. If we continue with this process of generating children for each valid move from each node, the final network will be large and complex. In the case of this game, there are 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 = 362,880 possible states. This means that the graph will have 362,880 nodes. Once all possible states are generated, we can see among them which are the final states, and we can see the path between states that lead from the initial state to a final state. As in the previous example.

In summary, we have discussed what we call states of a process, what a graph is, and how it is possible to find, among all possibilities, the "paths" that lead us to the solution of a problem. With these ideas, we are now ready to start the experiment.


